use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/cta/TSMExecutionModel.fml")
public class TSMExecutionModel {

  public int globalCounter;
  public CTA cta;
  public int objectId;

  @CreationScheme  
  TSMExecutionModel:initExecutionModel() {  
    log ("Initialize TSMExecutionModel " + this.name)    
    globalCounter = 0;    
    objectId = 0;  
  }  


  @FlexoConcept  
  public class SystemNodeExecutionUnit {  
  
    public int systemNodeCounter;  
    public SystemNode systemNode;  
      
    public FlexoConceptInstanceType<SystemNodeExecutionDefinition> systemNodeExecutionDefinition = systemNode.systemNodeExecutionDefinition;  
    @GetSetProperty(value="executionUnits", access=get)    
    public List<FlexoConceptInstanceType<ExecutionUnit>> getExecutionUnits {    
      return container.SelectFlexoConceptInstance(type=ExecutionUnit);    
    }  
  
    @CreationScheme    
    SystemNodeExecutionUnit:initSystemNodeExecutionUnit() {    
      log "Init SystemNodeExecution"      
      systemNodeCounter = 0;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    Void proceedSystemNodeExecutionUnit() {    
      systemNodeCounter = (systemNodeCounter + 1);      
      for (executionUnit : executionUnits) {      
        executionUnit.updateFireableTransitions()      
      }    
    }    
  
  
    @FlexoConcept    
    public class ExecutionUnit {    
      
      public int counter;    
      public MachineryAllocation machineryAllocation;    
          
      public FlexoConceptInstanceType<ExecutionUnitDefinition> executionUnitDefinition = machineryAllocation.executionUnitDefinition;    
      @GetSetProperty(value="fireableTransitions", access=get)      
      public List<FlexoConceptInstanceType<Transition>> getFireableTransitions {      
        return container.container.SelectFlexoConceptInstance(type=Transition,where=where=selected.isFireable);      
      }    
          
      public FlexoConceptInstanceType<Machinery> machinery = machineryAllocation.machinery;    
      public String id;    
      
      @ActionScheme      
      Void initExecutionUnit() {      
        log "Init ExecutionUnit"        
        counter = 0;        
        id = (this.concept.name + objectId);        
        objectId = (objectId + 1);        
        log ("Maintenant objectId=" + objectId)      
      }      
      
      @ActionScheme      
      Void execute() {      
        log "On devrait pas passer ici"      
      }      
      
      @ActionScheme      
      Void proceedExecutionStep() {      
        counter = (counter + 1);        
        container.proceedSystemNodeExecutionUnit()      
      }      
      
      @ActionScheme      
      Void updateFireableTransitions() {      
          
      }      
      
      
      @FlexoConcept      
      public class Transition {      
          
              
        abstract Boolean isFireable;      
              
        abstract String label;      
              
        abstract String name;      
          
        @ActionScheme        
        public Void fire() {        
              
        }        
          
        @ActionScheme        
        Void update() {        
              
        }        
          
      }      
      
    }    
  
    @FlexoConcept    
    public class GuardActionExecutionUnit extends ExecutionUnit  {    
      
      public GuardActionExecutionUnitDefinition guardActionExecutionUnitDefinition;    
      
      @CreationScheme      
      GuardActionExecutionUnit:create() {      
        this.initExecutionUnit()      
      }      
      
      @ActionScheme      
      Void execute() {      
        log ("Starting execution of GuardActionExecutionUnit " + this)        
        log ("executionUnitDefinition=" + executionUnitDefinition)        
        guardActionExecutionUnitDefinition = executionUnitDefinition;        
        log ("Juste avant, container=" + container.container)        
        for (guardAction : guardActionExecutionUnitDefinition.guardActions) {        
          GuardActionTransition.create(guardAction)        
        }        
        List<FlexoConceptInstanceType<GuardActionTransition>> allTransitions = container.container.SelectFlexoConceptInstance(type=GuardActionTransition);        
        log ("allTransitions=" + allTransitions)        
        log ("fireableTransitions=" + fireableTransitions)      
      }      
      
      @ActionScheme      
      public Void updateFireableTransitions() {      
        log "updateFireableTransitions"        
        MatchingSet aMatchingSet = this.initiateMatching(GuardActionTransition);        
        for (guardAction : guardActionExecutionUnitDefinition.guardActions) {        
          FlexoConceptInstanceType<GuardActionTransition> transition = FML@RT::MatchFlexoConceptInstance as GuardActionTransition match=(guardAction=guardAction) using GuardActionTransition:create(guardAction);          
          log ("Match transition " + transition)          
          transition.update()        
        }        
        aMatchingSet.finalizeMatching()        
        this.firePropertyChange fireableTransitions      
      }      
      
      
      @FlexoConcept      
      public class GuardActionTransition extends Transition  {      
          
        public GuardAction guardAction;      
        @GetSetProperty(value="isFireable", access=get)        
        public Boolean getIsFireable {        
          return guardAction.actionScheme.conditional.getBindingValue(this);        
        }      
              
        public String label = (((guardAction.actionScheme.conditional.toString + "/") + guardAction.actionScheme.name) + "()");      
              
        public String name = (guardAction.name + "()");      
          
        @CreationScheme        
        GuardActionTransition:create(FlexoConceptInstanceType<GuardAction> guardAction) {        
          guardAction = parameters.guardAction;        
        }        
          
        @ActionScheme        
        public Object fire() {        
          log ("Hop, je declenche la transition pour " + guardAction)          
          Object returned = container.ExecuteFlexoBehaviour();          
          container.proceedExecutionStep()          
          return returned;        
        }        
          
        @ActionScheme        
        Void update() {        
          this.firePropertyChange isFireable        
        }        
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class ExecutionUnit {  
  
    public int counter;  
    public MachineryAllocation machineryAllocation;  
      
    public FlexoConceptInstanceType<ExecutionUnitDefinition> executionUnitDefinition = machineryAllocation.executionUnitDefinition;  
    @GetSetProperty(value="fireableTransitions", access=get)    
    public List<FlexoConceptInstanceType<Transition>> getFireableTransitions {    
      return container.container.SelectFlexoConceptInstance(type=Transition,where=where=selected.isFireable);    
    }  
      
    public FlexoConceptInstanceType<Machinery> machinery = machineryAllocation.machinery;  
    public String id;  
  
    @ActionScheme    
    Void initExecutionUnit() {    
      log "Init ExecutionUnit"      
      counter = 0;      
      id = (this.concept.name + objectId);      
      objectId = (objectId + 1);      
      log ("Maintenant objectId=" + objectId)    
    }    
  
    @ActionScheme    
    Void execute() {    
      log "On devrait pas passer ici"    
    }    
  
    @ActionScheme    
    Void proceedExecutionStep() {    
      counter = (counter + 1);      
      container.proceedSystemNodeExecutionUnit()    
    }    
  
    @ActionScheme    
    Void updateFireableTransitions() {    
      
    }    
  
  
    @FlexoConcept    
    public class Transition {    
      
          
      abstract Boolean isFireable;    
          
      abstract String label;    
          
      abstract String name;    
      
      @ActionScheme      
      public Void fire() {      
          
      }      
      
      @ActionScheme      
      Void update() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class GuardActionExecutionUnit extends ExecutionUnit  {  
  
    public GuardActionExecutionUnitDefinition guardActionExecutionUnitDefinition;  
  
    @CreationScheme    
    GuardActionExecutionUnit:create() {    
      this.initExecutionUnit()    
    }    
  
    @ActionScheme    
    Void execute() {    
      log ("Starting execution of GuardActionExecutionUnit " + this)      
      log ("executionUnitDefinition=" + executionUnitDefinition)      
      guardActionExecutionUnitDefinition = executionUnitDefinition;      
      log ("Juste avant, container=" + container.container)      
      for (guardAction : guardActionExecutionUnitDefinition.guardActions) {      
        GuardActionTransition.create(guardAction)      
      }      
      List<FlexoConceptInstanceType<GuardActionTransition>> allTransitions = container.container.SelectFlexoConceptInstance(type=GuardActionTransition);      
      log ("allTransitions=" + allTransitions)      
      log ("fireableTransitions=" + fireableTransitions)    
    }    
  
    @ActionScheme    
    public Void updateFireableTransitions() {    
      log "updateFireableTransitions"      
      MatchingSet aMatchingSet = this.initiateMatching(GuardActionTransition);      
      for (guardAction : guardActionExecutionUnitDefinition.guardActions) {      
        FlexoConceptInstanceType<GuardActionTransition> transition = FML@RT::MatchFlexoConceptInstance as GuardActionTransition match=(guardAction=guardAction) using GuardActionTransition:create(guardAction);        
        log ("Match transition " + transition)        
        transition.update()      
      }      
      aMatchingSet.finalizeMatching()      
      this.firePropertyChange fireableTransitions    
    }    
  
  
    @FlexoConcept    
    public class GuardActionTransition extends Transition  {    
      
      public GuardAction guardAction;    
      @GetSetProperty(value="isFireable", access=get)      
      public Boolean getIsFireable {      
        return guardAction.actionScheme.conditional.getBindingValue(this);      
      }    
          
      public String label = (((guardAction.actionScheme.conditional.toString + "/") + guardAction.actionScheme.name) + "()");    
          
      public String name = (guardAction.name + "()");    
      
      @CreationScheme      
      GuardActionTransition:create(FlexoConceptInstanceType<GuardAction> guardAction) {      
        guardAction = parameters.guardAction;      
      }      
      
      @ActionScheme      
      public Object fire() {      
        log ("Hop, je declenche la transition pour " + guardAction)        
        Object returned = container.ExecuteFlexoBehaviour();        
        container.proceedExecutionStep()        
        return returned;      
      }      
      
      @ActionScheme      
      Void update() {      
        this.firePropertyChange isFireable      
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class Transition {  
  
      
    abstract Boolean isFireable;  
      
    abstract String label;  
      
    abstract String name;  
  
    @ActionScheme    
    public Void fire() {    
      
    }    
  
    @ActionScheme    
    Void update() {    
      
    }    
  
  }  

  @FlexoConcept  
  public class GuardActionTransition extends Transition  {  
  
    public GuardAction guardAction;  
    @GetSetProperty(value="isFireable", access=get)    
    public Boolean getIsFireable {    
      return guardAction.actionScheme.conditional.getBindingValue(this);    
    }  
      
    public String label = (((guardAction.actionScheme.conditional.toString + "/") + guardAction.actionScheme.name) + "()");  
      
    public String name = (guardAction.name + "()");  
  
    @CreationScheme    
    GuardActionTransition:create(FlexoConceptInstanceType<GuardAction> guardAction) {    
      guardAction = parameters.guardAction;    
    }    
  
    @ActionScheme    
    public Object fire() {    
      log ("Hop, je declenche la transition pour " + guardAction)      
      Object returned = container.ExecuteFlexoBehaviour();      
      container.proceedExecutionStep()      
      return returned;    
    }    
  
    @ActionScheme    
    Void update() {    
      this.firePropertyChange isFireable    
    }    
  
  }  

}
