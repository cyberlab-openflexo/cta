use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * Represent an execution of CTA model
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/cta/CTA.fml/Execution.fml")
public class Execution {

  @GetSetProperty(value="systemNodeExecutors", access=get)  
  public List<FlexoConceptInstanceType<SystemNodeExecutor>> getSystemNodeExecutors {  
    return this.SelectFlexoConceptInstance(type=SystemNodeExecutor);  
  }
  public String simulationName;
  public TSMExecutionModel executionModel;
  public String description;
  public SystemNodeExecutor rootSystemNodeExecutor;

  @CreationScheme  
  Execution:create(String simulationName, String description) {  
    simulationName = parameters.simulationName;    
    description = parameters.description;    
    executionModel = this.AddVirtualModelInstance();    
    executionModel.cta = container;    
    rootSystemNodeExecutor = SystemNodeExecutor.create(container.rootNode);    
    container.firePropertyChange executions  
  }  


  /**  
   * Represent the execution of a ExecutionUnit deployed on a Machinery of a PimCA model  
   *   
   */  
  @FlexoConcept  
  public class SystemNodeExecutor {  
  
    public SystemNode systemNode;  
    public SystemNodeExecutionUnit systemNodeExecutionUnit;  
    @GetSetProperty(value="executors", access=get)    
    public Void getExecutors {    
      container.SelectFlexoConceptInstance(type=Executor)    
    }  
  
    @CreationScheme    
    SystemNodeExecutor:create(FlexoConceptInstanceType<SystemNode> systemNode) {    
      systemNode = parameters.systemNode;      
      systemNodeExecutionUnit = executionModel.AddFlexoConceptInstance();      
      for (machineryAllocation : systemNode.machineryAllocations) {      
        Executor.create(machineryAllocation)      
      }    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  
    /**    
     * This is an executor of a MachineryAllocation    
     *     
     */    
    @FlexoConcept    
    public class Executor {    
      
      public MachineryAllocation machineryAllocation;    
      public ExecutionUnit executionUnit;    
      
      @CreationScheme      
      Executor:create(FlexoConceptInstanceType<MachineryAllocation> machineryAllocation) {      
        machineryAllocation = parameters.machineryAllocation;        
        executionUnit = executionModel.AddFlexoConceptInstance();      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  /**  
   * This is an executor of a MachineryAllocation  
   *   
   */  
  @FlexoConcept  
  public class Executor {  
  
    public MachineryAllocation machineryAllocation;  
    public ExecutionUnit executionUnit;  
  
    @CreationScheme    
    Executor:create(FlexoConceptInstanceType<MachineryAllocation> machineryAllocation) {    
      machineryAllocation = parameters.machineryAllocation;      
      executionUnit = executionModel.AddFlexoConceptInstance();    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
