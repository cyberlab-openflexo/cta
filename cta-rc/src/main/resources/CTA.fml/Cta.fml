use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://ensta-bretagne.fr/cyber/cta/CTA.fml")
public class CTA {

  public PimCA pimca;
  public SystemNode rootNode;
  public TSM tsm;

  @CreationScheme  
  CTA:init() {  
    pimca = PimCA.create();    
    tsm = TSM.init("ExecutionModel");    
    rootNode = SystemNode.create("System");  
  }  


  @FlexoConcept  
  public class SystemNode {  
  
    public PimCAModel pimcaModel;  
    public List diagrams;  
      
    public VirtualModelInstanceType<PimCADiagram> defaultDiagram = diagrams.get(0);  
    public String nodeName;  
  
    @CreationScheme    
    SystemNode:create(String nodeName) {    
      pimcaModel = PimCAModel.create();      
      nodeName = parameters.nodeName;      
      this.createNewDiagram(("DefaultDiagramFor" + pimcaModel.name),"Default diagram","")    
    }    
  
    @ActionScheme    
    VirtualModelInstanceType<PimCADiagram> createNewDiagram(String diagramName, String diagramTitle, String diagramDescription) {    
      log ("Create new diagram " + parameters.diagramName)      
      VirtualModelInstanceType<PimCADiagram> newDiagram = PimCADiagram.init(parameters.diagramName,pimcaModel,parameters.diagramTitle);      
      diagrams.add(newDiagram)      
      return newDiagram;    
    }    
  
    @ActionScheme    
    public Void allocateExistingExecutionUnit(FlexoConceptInstanceType<Machinery> machinery, FlexoConceptInstanceType<ExecutionUnit> executionUnit) {    
      this.getMachineryAllocation(parameters.machinery).allocateExistingExecutionUnit(parameters.executionUnit)    
    }    
  
    @ActionScheme    
    public Void allocateNewGuardActionExecutionUnit(FlexoConceptInstanceType<Machinery> machinery, String executionUnitName) {    
      this.getMachineryAllocation(parameters.machinery).allocateNewGuardActionExecutionUnit(parameters.executionUnitName)    
    }    
  
    @ActionScheme    
    FlexoConceptInstanceType<MachineryAllocation> getMachineryAllocation(FlexoConceptInstanceType<Machinery> machinery) {    
      FlexoConceptInstanceType<MachineryAllocation> returned = container.SelectUniqueFlexoConceptInstance(type=MachineryAllocation,where=where=(selected.machinery = parameters.machinery));      
      if (returned = null) {      
        returned = MachineryAllocation.create(parameters.machinery);      
      }      
      return returned;    
    }    
  
  
    @FlexoConcept    
    public class MachineryAllocation {    
      
      public Machinery machinery;    
      public ExecutionUnit executionUnit;    
      
      @CreationScheme      
      MachineryAllocation:create(FlexoConceptInstanceType<Machinery> aMachinery) {      
        machinery = parameters.aMachinery;      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
      @ActionScheme      
      public Void allocateExistingExecutionUnit(FlexoConceptInstanceType<ExecutionUnit> executionUnit) {      
        executionUnit = parameters.executionUnit;      
      }      
      
      @ActionScheme      
      public Void allocateNewGuardActionExecutionUnit(String executionUnitName) {      
        executionUnit = GuardActionExecutionUnit.create(parameters.executionUnitName);      
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class MachineryAllocation {  
  
    public Machinery machinery;  
    public ExecutionUnit executionUnit;  
  
    @CreationScheme    
    MachineryAllocation:create(FlexoConceptInstanceType<Machinery> aMachinery) {    
      machinery = parameters.aMachinery;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    public Void allocateExistingExecutionUnit(FlexoConceptInstanceType<ExecutionUnit> executionUnit) {    
      executionUnit = parameters.executionUnit;    
    }    
  
    @ActionScheme    
    public Void allocateNewGuardActionExecutionUnit(String executionUnitName) {    
      executionUnit = GuardActionExecutionUnit.create(parameters.executionUnitName);    
    }    
  
  }  

}
